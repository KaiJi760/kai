mhg.productDetail = { init: function (scope) { const btnOfferTncCardDetails = scope.querySelectorAll('[data-property-name="btn-offer-tnc-card-detail"]'); for (let i = 0; i < btnOfferTncCardDetails.length; i++) { btnOfferTncCardDetails[i].addEventListener("click", mhg.productDetail.contentTncCardDetail) } const tabLinks = scope.querySelectorAll('[data-property-name="btn-tab-card-detail"]'); let isDesktop = window.innerWidth >= 900; const hookTabHandlers = () => { tabLinks.forEach((link => { (link => { isDesktop ? (mhg.productDetail.removeMobileTabLinkHandlers(link), mhg.productDetail.setDesktopTabLinkHandlers(scope, link)) : (mhg.productDetail.removeDesktopTabLinkHandlers(link), mhg.productDetail.setMobileTabLinkHandlers(scope, link)) })(link) })) }; hookTabHandlers(); window.addEventListener("resize", (() => { const newIsDesktop = window.innerWidth >= 900; newIsDesktop !== isDesktop && (isDesktop = newIsDesktop, hookTabHandlers()) })); const btnCardDetails = scope.querySelectorAll('[data-property-name="btn-card-detail"]'), modalCardDetailTracking = scope.querySelector('[data-property-name="modal-card-detail"]'); if (modalCardDetailTracking) { const modalCardDetailTrackingCta = modalCardDetailTracking.querySelector('button[data-property-action="cta"]'); modalCardDetailTrackingCta && modalCardDetailTrackingCta.addEventListener("click", mhg.productDetail.applyNowPopup) } btnCardDetails.forEach((btnCardDetail => { btnCardDetail.addEventListener("click", (() => { mhg.productDetail.handleBtnCardDetail(scope, btnCardDetail) })) })), mhg.productDetail.handleCloseCardDetail(scope) }, handleBtnCardDetail: function (scope, element) { const productCard = element.closest('[data-property-name="productCard"]'), collapsedBtnCardDetail = productCard.querySelector('[data-property-name="collapsed-btn-card-detail"]'), expandedBtnCardDetail = productCard.querySelector('[data-property-name="expanded-btn-card-detail"]'), selectorProductButtonContainer = productCard.querySelector('[data-property-name="product-button"]'), selectorProductButton = selectorProductButtonContainer.querySelector('button[data-property-action="cta"]'), showQuickFact = "true" === element.getAttribute("data-property-show-quick-fact"), productCheckOffers = "true" === element.getAttribute("data-property-has-offer"), showMoreInfo = "true" === element.getAttribute("data-property-show-more-info"); if (window.innerWidth >= 900) { const productContentTab = productCard.querySelector('[data-property-name="product-content-tab"]'), productTab = productCard.querySelector('[data-property-name="product-tab"]'), btnCardIconDesktop = productCard.querySelector('[data-property-name="btn-card-icon-desktop"]'); if (element.classList.contains("detail-active")) { scope.querySelectorAll('[data-property-name="btn-card-detail"]').forEach((btn => btn.classList.remove("detail-active"))); scope.querySelectorAll('[data-property-name="productCard"]').forEach((card => { const contentTab = card.querySelector('[data-property-name="product-content-tab"]'), tab = card.querySelector('[data-property-name="product-tab"]'), iconDesktop = card.querySelector('[data-property-name="btn-card-icon-desktop"]'); contentTab.classList.add("hidden"), tab.classList.add("hidden"), iconDesktop.innerHTML = "▼"; card.querySelectorAll('[data-property-name="content-tab-card-detail"]').forEach((contentTabCardDetail => { "quick" == contentTabCardDetail.getAttribute("data-property-content") ? contentTabCardDetail.classList.remove("block") : contentTabCardDetail.classList.remove("hidden") })), card.querySelector('[data-property-name="collapsed-btn-card-detail"]').classList.remove("hidden"), card.querySelector('[data-property-name="expanded-btn-card-detail"]').classList.add("hidden"), card.querySelector('[data-property-name="product-button"]').classList.remove("tws-mb-0"), card.children[0].classList.remove("tws-py-0.5", "tws-pt-1"), card.children[0].classList.add("tws-py-1") })), selectorProductButtonContainer.classList.remove("tws-mb-0"), productCard.children[0].classList.remove("tws-py-0.5", "tws-pt-1"), productCard.children[0].classList.add("tws-py-1") } else { scope.querySelectorAll('[data-property-name="btn-card-detail"]').forEach((btn => btn.classList.remove("detail-active"))); let focusTab = ""; showQuickFact ? focusTab = "quick" : productCheckOffers ? focusTab = "offer" : showMoreInfo && (focusTab = "more-info"); scope.querySelectorAll('[data-property-name="productCard"]').forEach((card => { const contentTab = card.querySelector('[data-property-name="product-content-tab"]'), tab = card.querySelector('[data-property-name="product-tab"]'), iconDesktop = card.querySelector('[data-property-name="btn-card-icon-desktop"]'); contentTab.classList.add("hidden"), tab.classList.add("hidden"), iconDesktop.innerHTML = "▼"; card.querySelectorAll('[data-property-name="content-tab-card-detail"]').forEach((contentTabCardDetail => { contentTabCardDetail.getAttribute("data-property-content") == focusTab ? contentTabCardDetail.classList.remove("hidden") : contentTabCardDetail.classList.remove("block") })), card.querySelector('[data-property-name="collapsed-btn-card-detail"]').classList.remove("hidden"), card.querySelector('[data-property-name="expanded-btn-card-detail"]').classList.add("hidden"), card.querySelector('[data-property-name="product-button"]').classList.remove("tws-mb-0"), card.children[0].classList.remove("tws-py-0.5", "tws-pt-1"), card.children[0].classList.add("tws-py-1") })), element.classList.add("detail-active"), productContentTab.classList.remove("hidden"), productTab.classList.remove("hidden"), btnCardIconDesktop.innerHTML = "▲", collapsedBtnCardDetail.classList.add("hidden"), expandedBtnCardDetail.classList.remove("hidden"); const btnTabCardDetails = productCard.querySelectorAll('[data-property-name="btn-tab-card-detail"]'); btnTabCardDetails.forEach((btnTabCardDetail => { const lineTabCardDetail = btnTabCardDetail.querySelector('[data-property-name="line-tab-card-detail"]'); btnTabCardDetail.classList.remove("flex-none", "w-2/4"), btnTabCardDetail.getAttribute("data-property-tab") == focusTab ? (btnTabCardDetail.classList.add("font-bold", "text-gray-14"), lineTabCardDetail.classList.add("bg-blue-9")) : (btnTabCardDetail.classList.remove("font-bold"), btnTabCardDetail.classList.add("text-gray-10"), lineTabCardDetail.classList.remove("bg-blue-9")) })); productCard.querySelectorAll('[data-property-name="content-tab-card-detail"]').forEach((contentTabCardDetail => { contentTabCardDetail.classList.contains("block") && (contentTabCardDetail.classList.remove("block"), contentTabCardDetail.classList.add("hidden")), contentTabCardDetail.classList.contains("hidden") && (contentTabCardDetail.classList.add("block"), contentTabCardDetail.classList.remove("hidden")), contentTabCardDetail.getAttribute("data-property-content") == focusTab ? (contentTabCardDetail.classList.add("block"), contentTabCardDetail.classList.remove("hidden")) : (contentTabCardDetail.classList.remove("block"), contentTabCardDetail.classList.add("hidden")) })), btnTabCardDetails.forEach((btnTabCardDetail => { (showQuickFact || "quick" != btnTabCardDetail.getAttribute("data-property-tab")) && (productCheckOffers || "offer" != btnTabCardDetail.getAttribute("data-property-tab")) && (showMoreInfo || "more-info" != btnTabCardDetail.getAttribute("data-property-tab")) || btnTabCardDetail.classList.add("hidden") })); 2 == productCard.querySelectorAll('.hidden[data-property-name="btn-tab-card-detail"]').length && btnTabCardDetails.forEach((btnTabCardDetail => { "quick" == btnTabCardDetail.getAttribute("data-property-tab") && btnTabCardDetail.classList.add("flex-none", "w-2/4") })), selectorProductButtonContainer.classList.add("tws-mb-0"), productCard.children[0].classList.add("tws-py-0.5", "tws-pt-1"), productCard.children[0].classList.remove("tws-py-1") } } else { const contentCardDetail = scope.querySelector('[data-property-name="content-card-detail"]'), modalCardDetail = scope.querySelector('[data-property-name="modal-card-detail"]'), listQuickFact = scope.querySelector('[data-property-name="list-quick-fact"]'); contentCardDetail.setAttribute("data-property-from", "card-detail"); let dealStatus = !1; const hasApplyButton = productCard.querySelector('button[data-property-action="cta"]'); hasApplyButton && (dealStatus = !0), contentCardDetail.setAttribute("data-property-promotion", promotionProductCardTracking(productCard)), listQuickFact.innerHTML = ""; const productImage = productCard.getAttribute("data-property-product-image"), productName = productCard.getAttribute("data-property-product-name"), quickFact = JSON.parse(productCard.getAttribute("data-property-attribute-quick-fact")); if (quickFact) { const quickFactPros = quickFact.keyvalues?.filter((x => "pros" === x.key)), quickFactConst = quickFact.keyvalues?.filter((x => "cons" === x.key)); let arr = []; quickFactPros.length > 0 && (arr = arr.concat(quickFactPros[0].values)), quickFactConst.length > 0 && (arr = arr.concat(quickFactConst[0].values)), listQuickFact && arr.forEach((item => { if ("" !== item) { const li = document.createElement("li"); li.className = "my-0.5", li.innerHTML = item, listQuickFact.appendChild(li) } })) } const cardDetailHeader = scope.querySelector('[data-property-name="card-detail-header"]'), imgHeader = cardDetailHeader.querySelector("img"), labelHeader = cardDetailHeader.querySelector("label"), offersMobile = productCard.querySelector('[data-property-name="product-content-offer"]'), contentOfferMobile = scope.querySelector('[data-property-name="content-offer-mobile"]'), clonedOffersMobile = offersMobile.cloneNode(!0); contentOfferMobile.innerHTML = "", contentOfferMobile.appendChild(clonedOffersMobile), mhg.productDetail.initOfferElementBehavior(scope, clonedOffersMobile); const moreInfoMobile = productCard.querySelector('[data-property-name="product-content-more-info"]'); scope.querySelector('[data-property-name="content-more-info-mobile"]').innerHTML = moreInfoMobile.cloneNode(!0).innerHTML, labelHeader.textContent = productName, imgHeader.setAttribute("src", productImage); const scrollY = window.pageYOffset, body = document.body; body.style.position = "fixed", body.style.top = `-${scrollY}px`; const selectorMenuNavigation = document.querySelector('[data-property-name="container-listing"]'); selectorMenuNavigation && selectorMenuNavigation.classList.remove("fixed"), document.querySelector('[data-property-name="sticky-filter-panel"]')?.classList.remove("fixed"), modalCardDetail.classList.add("fixed"), contentCardDetail.classList.add("slide"), document.documentElement.style.overscrollBehavior = "none", contentCardDetail.setAttribute("data-property-card-index", productCard.getAttribute("data-property-card-index")), contentCardDetail.setAttribute("data-property-product-id", productCard.getAttribute("data-property-product-id")), contentCardDetail.setAttribute("data-property-product-name", productCard.getAttribute("data-property-product-name")), contentCardDetail.setAttribute("data-property-provider", productCard.getAttribute("data-property-provider")), contentCardDetail.setAttribute("data-property-provider-name", productCard.getAttribute("data-property-provider-name")), contentCardDetail.setAttribute("data-property-deal-status", !1), hasApplyButton && contentCardDetail.setAttribute("data-property-deal-status", !0); const btnApplyNowPopup = modalCardDetail.querySelector('button[data-property-action="cta"]'); if (selectorProductButton) { const btnTextApplyNow = selectorProductButton.innerText, btnUrlApplyNow = selectorProductButton.getAttribute("data-property-target"); btnApplyNowPopup.classList.remove("hidden"), btnApplyNowPopup.innerHTML = btnTextApplyNow, btnApplyNowPopup.setAttribute("data-property-target", btnUrlApplyNow), btnApplyNowPopup.setAttribute("data-property-card-index", productCard.getAttribute("data-property-card-index")), btnApplyNowPopup.setAttribute("data-property-product-id", productCard.getAttribute("data-property-product-id")), btnApplyNowPopup.setAttribute("data-property-product-name", productCard.getAttribute("data-property-product-name")), btnApplyNowPopup.setAttribute("data-property-provider", productCard.getAttribute("data-property-provider")), btnApplyNowPopup.setAttribute("data-property-provider-name", productCard.getAttribute("data-property-provider-name")), btnApplyNowPopup.setAttribute("data-property-variant-testing-url", selectorProductButton.getAttribute("data-property-variant-testing-url")), btnApplyNowPopup.setAttribute("data-property-variant-testing-weightage", selectorProductButton.getAttribute("data-property-variant-testing-weightage")), btnApplyNowPopup.setAttribute("data-property-promotion", promotionProductCardTracking(productCard)), btnApplyNowPopup.setAttribute("data-property-toggle-popup", selectorProductButton.getAttribute("data-property-toggle-popup")), btnApplyNowPopup.setAttribute("data-property-toggle-position", "card-details-mobile"); const getTargetOpenApplyNow = productCard.querySelector('[data-property-name="product-button"] [data-property-action="cta"]'); btnApplyNowPopup.setAttribute("data-property-target-open", getTargetOpenApplyNow.getAttribute("data-property-target-open")) } else btnApplyNowPopup.classList.add("hidden"); const urlAlias = productCard.getAttribute("data-property-product-url-alias"), seeFullDetails = scope.querySelectorAll('[data-property-name="see-full-details"]'); for (var i = 0; i < seeFullDetails.length; i++) { const seeFullDetail = seeFullDetails[i]; seeFullDetail.classList.remove("hidden"), seeFullDetail.removeAttribute("data-property-url"), urlAlias ? seeFullDetail.setAttribute("data-property-url", urlAlias) : seeFullDetail.classList.add("hidden"), seeFullDetail.addEventListener("click", (() => { const btnSeeFullUrl = seeFullDetail.getAttribute("data-property-url"); btnSeeFullUrl && "" !== btnSeeFullUrl.trim() && (window.location.href = btnSeeFullUrl) })) } const buttonTabs = modalCardDetail.querySelectorAll('[data-property-name="btn-tab-card-detail"]'); modalCardDetail.querySelectorAll('[data-property-name="content-tab-card-detail"]').forEach((contentTab => { let focusTab = ""; showQuickFact ? focusTab = "quick-fact-tab" : productCheckOffers ? focusTab = "offer-details-tab" : showMoreInfo && (focusTab = "more-info-tab"), contentTab.getAttribute("data-property-content") == focusTab ? (contentTab.classList.remove("hidden"), buttonTabs.forEach((buttonTab => { const tabLine = buttonTab.querySelector('[data-property-name="line-tab-card-detail"]'); buttonTab.classList.remove("hidden", "flex-none", "w-2/4"), buttonTab.getAttribute("data-property-tab") == focusTab ? (buttonTab.classList.remove("text-gray-10"), buttonTab.classList.add("text-gray-14", "font-bold"), contentTab.parentElement.classList.remove("second-slide"), tabLine.classList.add("bg-blue-9")) : (buttonTab.classList.add("text-gray-10"), buttonTab.classList.remove("text-gray-14", "font-bold"), tabLine.classList.remove("bg-blue-9")) }))) : contentTab.classList.add("hidden") })), buttonTabs.forEach((buttonTab => { (showQuickFact || "quick-fact-tab" != buttonTab.getAttribute("data-property-tab")) && (productCheckOffers || "offer-details-tab" != buttonTab.getAttribute("data-property-tab")) && (showMoreInfo || "more-info-tab" != buttonTab.getAttribute("data-property-tab")) || buttonTab.classList.add("hidden") })); 2 == modalCardDetail.querySelectorAll('.hidden[data-property-name="btn-tab-card-detail"]').length && buttonTabs.forEach((buttonTab => { "quick-fact-tab" == buttonTab.getAttribute("data-property-tab") && buttonTab.classList.add("flex-none", "w-2/4") })); const scrollModalContents = modalCardDetail.querySelectorAll('[data-property-name="content-scroll"]'); scrollModalContents.forEach((scrollModalContent => { scrollModalContent.querySelector('[data-property-name="see-more-provider-button"]').classList.add("hidden") })); "true" === productCard.getAttribute("data-property-has-provider-button") && productCard.hasAttribute("data-property-provider-url-alias") && scrollModalContents.forEach((scrollModalContent => { const seeMoreProviderButton = scrollModalContent.querySelector('[data-property-name="see-more-provider-button"]'), labelSeeMoreProviderButton = scrollModalContent.querySelector('[data-property-name="label-see-more-provider-button"]'); seeMoreProviderButton.classList.remove("hidden"), seeMoreProviderButton.setAttribute("data-property-url", productCard.getAttribute("data-property-provider-url-alias")), labelSeeMoreProviderButton.innerHTML = labelSeeMoreProviderButton.getAttribute("data-property-label").replace("{providerName}", productCard.getAttribute("data-property-provider-name")) })) } }, handleTabLinkDesktop: function (scope, item) { return function (e) { e.preventDefault(); const targetTab = item.dataset.propertyTab; scope.querySelectorAll('[data-property-name="line-tab-card-detail"]').forEach((link => link.classList.remove("bg-blue-9"))); scope.querySelectorAll('[data-property-name="btn-tab-card-detail"]').forEach((link => { link.classList.remove("font-bold"), link.classList.remove("text-gray-14"), link.classList.add("text-gray-10") })); scope.querySelectorAll('[data-property-name="content-tab-card-detail"]').forEach((content => content.classList.remove("block"))), item.querySelector('[data-property-name="line-tab-card-detail"]').classList.add("bg-blue-9"), item.classList.add("font-bold"), item.classList.remove("text-gray-10"), item.classList.add("text-gray-14"); const productCard = item.closest('div[data-property-name="productCard"]'); let dealStatus = !1; productCard.querySelector('button[data-property-action="cta"]') && (dealStatus = !0); productCard.querySelectorAll('[data-property-name="content-tab-card-detail"]').forEach((contentTabCardDetail => { if (contentTabCardDetail.getAttribute("data-property-content") == targetTab) { contentTabCardDetail.classList.add("block"), contentTabCardDetail.classList.remove("hidden"); let componentTitle = "Quick Facts"; "offer" == targetTab ? componentTitle = "Offer Detail" : "more-info" == targetTab && (componentTitle = "More Info"), trackAny({ event: "product_interaction", component_type: "tab", component_title: componentTitle, action: "click", item_list_name: pageVerticalList, items: [{ item_id: productCard.getAttribute("data-property-product-id"), item_name: productCard.getAttribute("data-property-product-name"), item_brand: productCard.getAttribute("data-property-provider-name"), index: productCard.getAttribute("data-property-card-index"), deal_status: dealStatus, promotion: promotionProductCardTracking(productCard) }] }) } else contentTabCardDetail.classList.remove("block"), contentTabCardDetail.classList.add("hidden") })) } }, setDesktopTabLinkHandlers: function (scope, item) { const handler = this.handleTabLinkDesktop(scope, item); item._desktopTabLinkHandler = handler, item.addEventListener("click", handler) }, removeDesktopTabLinkHandlers: function (item) { item._desktopTabLinkHandler && (item.removeEventListener("click", item._desktopTabLinkHandler), item._desktopTabLinkHandler = null) }, handleTabLinkMobile: function (scope, item) { return function (e) { e.preventDefault(); const targetTab = item.dataset.propertyTab, contentOfferTncContentDetails = scope.querySelector('[data-property-name="content-card-detail"]').querySelectorAll('[data-property-name="content-offer-tnc-card-detail"]'), allHiddenContent = Array.from(contentOfferTncContentDetails).every((element => element.classList.contains("hidden"))), contentCardDetail = scope.querySelector('[data-property-name="content-card-detail"]'); let dealStatus = !1; "true" === contentCardDetail.getAttribute("data-property-deal-status") && (dealStatus = !0); const modalCardDetail = scope.querySelector('[data-property-name="modal-card-detail"]'), buttonTabs = modalCardDetail.querySelectorAll('[data-property-name="btn-tab-card-detail"]'); modalCardDetail.querySelectorAll('[data-property-name="content-tab-card-detail"]').forEach((contentTab => { if (contentTab.getAttribute("data-property-content") === targetTab) { contentTab.classList.remove("hidden"), buttonTabs.forEach((buttonTab => { const tabLine = buttonTab.querySelector('[data-property-name="line-tab-card-detail"]'); buttonTab.getAttribute("data-property-tab") === targetTab ? (buttonTab.classList.remove("text-gray-10"), buttonTab.classList.add("text-gray-14", "font-bold"), tabLine.classList.add("bg-blue-9"), "quick-fact-tab" == contentTab.getAttribute("data-property-content") && contentTab.parentElement.classList.remove("second-slide"), "offer-details-tab" == contentTab.getAttribute("data-property-content") && (allHiddenContent ? contentTab.parentElement.classList.remove("second-slide") : contentTab.parentElement.classList.add("second-slide"))) : (buttonTab.classList.add("text-gray-10"), buttonTab.classList.remove("text-gray-14", "font-bold"), tabLine.classList.remove("bg-blue-9")) })); let componentTitle = "Quick Facts"; "offer-details-tab" == targetTab ? componentTitle = "Offer Detail" : "more-info-tab" == targetTab && (componentTitle = "More Info"), trackAny({ event: "product_interaction", component_type: "tab", component_title: componentTitle, action: "click", item_list_name: pageVerticalList, items: [{ item_id: contentCardDetail.getAttribute("data-property-product-id"), item_name: contentCardDetail.getAttribute("data-property-product-name"), item_brand: contentCardDetail.getAttribute("data-property-provider-name"), index: contentCardDetail.getAttribute("data-property-card-index"), deal_status: dealStatus, promotion: contentCardDetail.getAttribute("data-property-promotion") }] }) } else contentTab.classList.add("hidden") })) } }, setMobileTabLinkHandlers: function (scope, item) { const handler = this.handleTabLinkMobile(scope, item); item._mobileTabLinkHandler = handler, item.addEventListener("click", handler) }, removeMobileTabLinkHandlers: function (item) { item._mobileTabLinkHandler && (item.removeEventListener("click", item._mobileTabLinkHandler), item._mobileTabLinkHandler = null) }, handleCloseCardDetail: function (scope) { const btnCloseCardDetail = scope.querySelector(".popup-card-detail__top"), stickyFooterContent = document.querySelector('[data-selector="sticky-footer-content"]'), stickyFooterCta = stickyFooterContent && stickyFooterContent.querySelector('[data-property-action="cta"]'); btnCloseCardDetail.addEventListener("click", (function () { mhg.productDetail.closeCardDetail(scope) })), btnCloseCardDetail.addEventListener("touchmove", (function () { mhg.productDetail.closeCardDetail(scope) })), window.addEventListener("click", (function (e) { const modalCardDetail = scope.querySelector('[data-property-name="modal-card-detail"]'); e.target == modalCardDetail && mhg.productDetail.closeCardDetail(scope) })), window.addEventListener("touchmove", (function (e) { const modalCardDetail = scope.querySelector('[data-property-name="modal-card-detail"]'); e.target == modalCardDetail && mhg.productDetail.closeCardDetail(scope) })), stickyFooterCta && stickyFooterCta.addEventListener("click", (function () { mhg.productDetail.closeCardDetail(scope, !0) })) }, contentTncCardDetail: function () { const contentOfferTncCardDetail = this.parentElement.querySelector('[data-property-name="content-offer-tnc-card-detail"]'), iconOfferTncCardDetail = this.parentElement.querySelector('[data-property-name="icon-offer-tnc-card-detail"]'); contentOfferTncCardDetail.classList.contains("hidden") ? (contentOfferTncCardDetail.classList.remove("hidden"), iconOfferTncCardDetail.innerHTML = "remove") : (contentOfferTncCardDetail.classList.add("hidden"), iconOfferTncCardDetail.innerHTML = "add") }, applyNowPopup: function () { trackAny({ event: "product_click_apply", component_type: "drawer", component_title: "Apply Now", action: "click", item_list_name: pageVerticalList, items: [{ item_id: this.getAttribute("data-property-product-id"), item_name: this.getAttribute("data-property-product-name"), item_brand: this.getAttribute("data-property-provider-name"), index: this.getAttribute("data-property-card-index"), deal_status: !0, promotion: this.getAttribute("data-property-promotion") }] }) }, closeCardDetail: function (scope, disabledScroll = !1) { const body = document.body, scrollY = body.style.top; body.style.position = "", body.style.top = "", document.documentElement.style.overflowY = "hidden", document.documentElement.style.height = "100%", scrollY && window.scrollTo({ top: -1 * parseInt(scrollY || "0") - 128, behavior: "instant" }), setTimeout((() => { scope.querySelector('[data-property-name="modal-card-detail"]').classList.remove("fixed"); const selectorMenuNavigation = document.querySelector('[data-property-name="container-listing"]'); selectorMenuNavigation && selectorMenuNavigation.classList.add("fixed"), document.querySelector('[data-property-name="sticky-filter-panel"]')?.classList.add("fixed"), document.documentElement.style.overscrollBehavior = "auto", document.documentElement.style.overflowY = disabledScroll ? "hidden" : "auto", document.documentElement.style.height = "auto" }), 200); const contentCardDetail = scope.querySelector('[data-property-name="content-card-detail"]'); if (contentCardDetail.classList.remove("slide"), document.querySelector('[data-property-tab="quick-fact-tab"]') && (document.querySelector('[data-property-tab="quick-fact-tab"]').classList.remove("text-gray-14"), document.querySelector('[data-property-tab="quick-fact-tab"]').classList.remove("text-gray-10")), document.querySelector('[data-property-tab="offer-details-tab"]') && (document.querySelector('[data-property-tab="offer-details-tab"]').classList.remove("text-gray-14"), document.querySelector('[data-property-tab="offer-details-tab"]').classList.remove("text-gray-10")), contentCardDetail.getAttribute("data-property-product-id")) { let dealStatus = !1; "true" === contentCardDetail.getAttribute("data-property-deal-status") && (dealStatus = !0); let promotion = contentCardDetail.getAttribute("data-property-promotion"); "learn-more" == contentCardDetail.getAttribute("data-property-from") && trackAny({ event: "product_interaction", component_type: "card-carousel", component_title: "Learn More_" + contentCardDetail.getAttribute("data-property-offer"), action: "collapse", item_list_name: pageVerticalList, items: [{ item_id: contentCardDetail.getAttribute("data-property-product-id"), item_name: contentCardDetail.getAttribute("data-property-product-name"), item_brand: contentCardDetail.getAttribute("data-property-provider-name"), index: contentCardDetail.getAttribute("data-property-card-index"), deal_status: dealStatus, promotion: promotion }] }) } }, initOfferElementBehavior: function (scope, offerElement) { const btnOffers = offerElement.querySelectorAll('[data-property-name="btn-offer-tnc-card-detail"]'); for (let i = 0; i < btnOffers.length; i++) { const btnOffer = btnOffers[i]; btnOffer.addEventListener("click", (function () { const contentOfferTncCardDetail = this.parentElement.querySelector('[data-property-name="content-offer-tnc-card-detail"]'), iconOfferTncCardDetail = this.parentElement.querySelector('[data-property-name="icon-offer-tnc-card-detail"]'); contentOfferTncCardDetail.classList.contains("hidden") ? (contentOfferTncCardDetail.classList.remove("hidden"), iconOfferTncCardDetail.innerHTML = "remove") : (contentOfferTncCardDetail.classList.add("hidden"), iconOfferTncCardDetail.innerHTML = "add"); const contentOfferTncDetails = btnOffer.closest('[data-property-name="product-content-offer"]').querySelectorAll('[data-property-name="content-offer-tnc-card-detail"]'); Array.from(contentOfferTncDetails).every((element => element.classList.contains("hidden"))) ? btnOffer.closest('[data-property-name="content-card-detail"]').classList.remove("second-slide") : btnOffer.closest('[data-property-name="content-card-detail"]').classList.add("second-slide") })) } } };
//# sourceURL=https://cdn1.hubspotusercontent-eu1.net/hub/25174313/hub_generated/template_assets/79577952732/1726472319847/modules/common/product-card/product-detail.js