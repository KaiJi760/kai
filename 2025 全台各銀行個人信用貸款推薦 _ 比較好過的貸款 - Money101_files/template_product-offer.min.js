mhg.productOffer = { PAGETYPES: { category: "category", productInformation: "product-information" }, pageType: null, desktopPopupCountdownTimer: null, init: function ({ widgetId: widgetId }) { const scope = document.querySelector(`#hs_cos_wrapper_${widgetId}`); null !== scope.querySelector('[data-module-id="results-page-product-list"]') ? mhg.productOffer.pageType = mhg.productOffer.PAGETYPES.category : null !== scope.querySelector('[data-property-name="product-information-page"]') && (mhg.productOffer.pageType = mhg.productOffer.PAGETYPES.productInformation); const offerCards = scope.querySelectorAll('[data-property-name="content-offer-detail"]'); for (let i = 0; i < offerCards.length; i++) { offerCards[i].addEventListener("click", popupOfferDetail) } function popupOfferDetail(event) { if ("A" === event.target.tagName) return; event.preventDefault(); const contentOfferDetail = this, productCard = contentOfferDetail.closest('[data-property-name="offer-swiper"]'), websiteCampaignOffers = JSON.parse(productCard.getAttribute("data-property-website-campaign-offer") ?? []), flashSaleOffers = JSON.parse(productCard.getAttribute("data-property-flash-sale-offer") ?? []), exclusiveOffers = JSON.parse(productCard.getAttribute("data-property-exclusive-offer") ?? []), welcomeOffers = JSON.parse(productCard.getAttribute("data-property-welcome-offer") ?? []); let productDataOffer = []; productDataOffer = productDataOffer.concat(websiteCampaignOffers).concat(flashSaleOffers).concat(exclusiveOffers).concat(welcomeOffers), document.documentElement.style.overflowY = "hidden"; window.innerWidth >= 100 ? (mhg.productOffer.handlePopupOfferDetailDesktop(scope, contentOfferDetail, productDataOffer), mhg.productOffer.handlePopupProductCard(scope, contentOfferDetail), mhg.productOffer.handlePopupProductInformation(scope, contentOfferDetail))
     : 
    mhg.productOffer.handlePopupOfferDetailMobile(scope, contentOfferDetail, productDataOffer) } mhg.productOffer.closeIntervalMobileProductInformation(scope), mhg.productOffer.closeOfferDetailListener(scope);
 const swipers = scope.querySelectorAll('[data-property-name="offer-swiper"]'); let removedOfferCount = 0; Array.from(swipers).map((swiper => { const swiperWrapper = swiper?.querySelector(".swiper-wrapper"), swiperSlides = Array.from(swiper.querySelectorAll(".swiper-slide")), offerCardWrappers = swiper?.querySelectorAll('[data-property-name="offer-card-wrapper"]'); swiper?.querySelector(".offer-swiper-pagination"); swiperSlides.map((swiperSlide => { isInactiveOffer(swiperSlide.querySelector('[data-property-name="btn-offer-detail"]')) && (removedOfferCount++, swiperSlide.remove()) })); const totalVisibleOffers = swiper?.querySelectorAll(".swiper-slide")?.length; if (mhg.productOffer.pageType === mhg.productOffer.PAGETYPES.productInformation ? offerCardWrappers.forEach((offerCardWrapper => { offerCardWrapper && (totalVisibleOffers > 1 ? offerCardWrapper.classList.add("w-full", "md:w-33", "max-w-33") : offerCardWrapper.classList.add("w-33")) })) : (swiperWrapper.classList.remove("w-0"), totalVisibleOffers > 1 ? swiperWrapper.classList.add("sm:w-full", "md:w-0") : swiperWrapper.classList.add("w-full", "md:w-0")), 0 === totalVisibleOffers) { swiper.parentElement.querySelector('[data-selector="offer-count-container"]').classList.add("hidden") } const offerCountElement = swiper.parentElement.querySelector('[data-selector="offer-count"]'); offerCountElement && (offerCountElement.textContent = 1 === totalVisibleOffers ? "" : "" + totalVisibleOffers) })), console.warn("Number of inactive offers removed: " + removedOfferCount); const swiperInstancesMap = Array.from(swipers).map((swiper => { const macroIdClassList = Array.from(swiper.classList).filter((className => className.indexOf(widgetId) >= 0)), result = { macroId: macroIdClassList[0] }; return 1 == macroIdClassList.length ? result.swiperInstance = mhg.productOffer.offerSwiper(widgetId, macroIdClassList[0]) : console.error(`Number of classes in offer cards containing widgetId is ${macroIdClassList.length}.\n          Please check implementation`), result })); document.addEventListener("DOMContentLoaded", (() => { mhg.productOffer.initCountdownTimers(scope, swiperInstancesMap) })), mhg.productOffer.handleOfferDescription(scope) }, initCountdownTimers: function (scope, swiperInstancesMap) { mhg.productOffer.handleStaticOfferCountdown(scope, swiperInstancesMap), setInterval((function () { mhg.productOffer.handleStaticOfferCountdown(scope, swiperInstancesMap) }), 1e3) }, hideInactiveOffers: function (countdownWrapperOrSwiperSlideElement, swiperInstancesMap) { const swiperSlide = countdownWrapperOrSwiperSlideElement.classList.contains(".swiper-slide") ? countdownWrapperOrSwiperSlideElement : countdownWrapperOrSwiperSlideElement.closest(".swiper-slide"); if (swiperSlide) { const macroId = Array.from(swiperSlide.closest(".swiper").classList).find((classNames => /_.*_offers$/.test(classNames))); macroId && swiperInstancesMap.forEach((swiperInstancePair => { if (swiperInstancePair.macroId == macroId) { const swiperInstance = swiperInstancePair.swiperInstance, slideIndex = swiperInstance.slides.indexOf(swiperSlide); if (slideIndex >= 0) { if (1 == swiperInstance.slides.length) { const offerIndexValue = swiperSlide.getAttribute("data-hash"), productCard = swiperSlide.closest('[data-property-name="productCard"]') ?? swiperSlide.closest('[data-production-information-section="highlights"]'); if (mhg.productOffer.pageType === mhg.productOffer.PAGETYPES.category) { const offerDetail = productCard.querySelector('[data-property-content="offer"][data-property-name="content-tab-card-detail"] [data-property-name="product-content-offer"]').querySelector(`[data-property-name="product-content-offer-detail"][data-offer-index="${offerIndexValue}"]`); if (offerDetail?.remove(), productCard.querySelector('[data-property-tab="offer"][data-property-name="btn-tab-card-detail"]').classList.add("invisible"), isDesktop() || document.querySelector('[data-property-name="content-card-detail"] [data-property-name="btn-tab-card-detail"][data-property-tab="offer-details-tab"]').classList.add("invisible"), productCard.querySelector("[data-property-has-offer]").setAttribute("data-property-has-offer", !1), isDesktop()) { const productTab = productCard.querySelector('[data-property-name="product-tab"]'); productTab.classList.contains("hidden") || productTab.querySelector('[data-property-tab="quick"]').click(), document.querySelector('[data-property-name="modal-content-offer-detail"] [data-property-name="btn-close-offer-detail"]').click() } else document.querySelector('[data-property-name="modal-card-detail"] [data-property-name="btn-tab-card-detail"][data-property-tab="quick-fact-tab"]').click() } else mhg.productOffer.pageType === mhg.productOffer.PAGETYPES.productInformation ? isDesktop() ? document.querySelector('[data-property-name="modal-content-offer-detail"] [data-property-name="btn-close-offer-detail"]').click() : document.querySelector('[data-property-name="modal-card-detail"] [data-property-name="btn-close-card-detail"]').click() : console.error(`Unable to detect page type or unsupported page type: ${mhg.productOffer.pageType}`); swiperInstance.removeSlide(slideIndex), swiperInstance.destroy(), mhg.productOffer.pageType === mhg.productOffer.PAGETYPES.category ? productCard.querySelector('[data-selector-type="product-card-offer-section"]').remove() : productCard.querySelector('[data-selector="product-information-offer-section"]').remove() } } else console.error("slider not found in swiper " + swiperInstancePair.macroId) } })) } }, handleStaticOfferCountdown: function (scope, swiperInstancesMap) { const dtNow = new Date(Date.now()); dtNow.setMilliseconds(0); const now = dtNow.getTime(); scope.querySelectorAll('div[data-property-name="countdown-timer"], [data-property-name="offer-popup-detail-title-mb"]').forEach(((countdownWrapperElement, index) => { const strStartDate = countdownWrapperElement.getAttribute("data-property-offer-start-date"), strEndDate = countdownWrapperElement.getAttribute("data-property-offer-end-date"); let isInactiveOffer = !1; if (strStartDate) { const startDate = Date.parse(strStartDate); !isNaN(startDate) && now <= startDate && (mhg.productOffer.hideInactiveOffers(countdownWrapperElement, swiperInstancesMap), isInactiveOffer = !0) } if (strEndDate) { const endDate = Date.parse(strEndDate); if (!isNaN(endDate)) { const timeLeft = mhg.productOffer.calculateTimeLeft(endDate); 0 === timeLeft.days && 0 === timeLeft.hours && 0 === timeLeft.minutes && 0 === timeLeft.seconds && (mhg.productOffer.hideInactiveOffers(countdownWrapperElement, swiperInstancesMap), isInactiveOffer = !0) } } if (!isInactiveOffer && countdownWrapperElement.hasAttribute("data-property-offer-include-countdown")) { if ("true" === countdownWrapperElement.getAttribute("data-property-offer-include-countdown") && (mhg.productOffer.performCountdown({ elem: countdownWrapperElement }), mhg.productOffer.isOfferBadgeTextOverflowing(countdownWrapperElement))) { countdownWrapperElement.closest('[data-property-name="product-information-page"]') && countdownWrapperElement.querySelector('[data-property-name="offer-popup-countdown"]').classList.add("hidden") } } })) }, handleDynamicOfferCountdowns: function (staticOfferCountdownReference, dynamicOfferCountdown) { if (dynamicOfferCountdown?.querySelector('[data-property-name="offer-popup-countdown"]').classList.add("hidden"), staticOfferCountdownReference.hasAttribute("data-property-offer-include-countdown")) { "true" === staticOfferCountdownReference.getAttribute("data-property-offer-include-countdown") && (mhg.productOffer.performCountdown({ elem: staticOfferCountdownReference }, dynamicOfferCountdown), mhg.productOffer.desktopPopupCountdownTimer = setInterval((function () { mhg.productOffer.performCountdown({ elem: staticOfferCountdownReference }, dynamicOfferCountdown) }), 1e3), dynamicOfferCountdown?.querySelector('[data-property-name="offer-popup-countdown"]').classList.remove("hidden")) } }, calculateTimeLeft: function (fromDate) { const timeDifference = new Date(fromDate) - new Date; if (timeDifference <= 0) return { days: 0, hours: 0, minutes: 0, seconds: 0 }; return { days: Math.floor(timeDifference / 864e5), hours: Math.floor(timeDifference % 864e5 / 36e5), minutes: Math.floor(timeDifference % 36e5 / 6e4), seconds: Math.floor(timeDifference % 6e4 / 1e3) } }, performCountdown: function ({ elem: elem }, offerCountDownInner) { const endText = elem.getAttribute("data-property-offer-ends-in-text"), daysText = elem.getAttribute("data-property-offer-days-in-text"), date = elem.getAttribute("data-property-offer-end-date"); if (null == date || "" === date) return; const timeLeft = mhg.productOffer.calculateTimeLeft(date); let time = ""; 0 === timeLeft.days && 0 === timeLeft.hours && 0 === timeLeft.minutes && 0 === timeLeft.seconds || (time = ` ${endText} ${timeLeft.days} ${daysText} `, time += String(timeLeft.hours).padStart(2, "0") + ":" + String(timeLeft.minutes).padStart(2, "0") + ":" + String(timeLeft.seconds).padStart(2, "0")); const countdownTextElement = offerCountDownInner?.querySelector('[data-property-name="offer-popup-countdown"]') ?? elem?.querySelector('[data-property-name="offer-popup-countdown"]'); countdownTextElement && window.requestAnimationFrame((function () { countdownTextElement.innerHTML = `${time}` })) }, updateOfferTitleColours: function (contentOfferType, contentOfferDetailtitles) { let offerBackgroundColor = ""; const TEXTCOLOR_ALL = []; TEXTCOLOR_ALL.push("text-orange-9"), TEXTCOLOR_ALL.push("text-purple-600"), TEXTCOLOR_ALL.push("text-blue-10"), TEXTCOLOR_ALL.push("text-gray-11"); let currentTextColour = ""; return "websiteCampaign" == contentOfferType ? (currentTextColour = "text-purple-600", offerBackgroundColor = "bg-purple-50") : "flashSale" == contentOfferType ? (currentTextColour = "text-orange-9", offerBackgroundColor = "bg-orange") : "exclusiveOffers" == contentOfferType ? (currentTextColour = "text-blue-10", offerBackgroundColor = "bg-blue-3") : "welcomeOffers" == contentOfferType && (currentTextColour = "text-gray-11", offerBackgroundColor = "bg-gray-3"), TEXTCOLOR_ALL.filter((textColourType => textColourType !== currentTextColour)).forEach((textColourType => { contentOfferDetailtitles.classList.remove(textColourType) })), contentOfferDetailtitles.classList.add(currentTextColour), { textColour: currentTextColour, backgroundColor: offerBackgroundColor } }, handlePopupOfferDetailDesktop: function (scope, element, dataOffer) { const modalOverlayOfferDetail = scope.querySelector('[data-property-name="modal-overlay-offer-detail"]'), modalContentOfferDetail = scope.querySelector('[data-property-name="modal-content-offer-detail"]'); modalOverlayOfferDetail.classList.add("fixed"), modalContentOfferDetail.classList.remove("hidden"); const contentOfferDetailGifts = scope.querySelector('[data-property-name="offer-popup-detail-gifts"]'), contentOfferDetailGiftsTitle = scope.querySelector('[data-property-name="offer-popup-detail-gifts-title"]'), contentOfferDetailGiftsSeparator = scope.querySelector('[data-property-name="offer-popup-detail-gifts-separator"]'), contentOfferDetailtitles = scope.querySelector('[data-property-name="offer-popup-detail-title"]'); contentOfferDetailGifts.innerHTML = ""; const btnOfferDetail = element.querySelector('[data-property-name="btn-offer-detail"]'), contentOfferTitle = btnOfferDetail.getAttribute("data-property-offer-title"), contentOfferUid = btnOfferDetail.getAttribute("data-property-offer-uid"), contentOfferType = btnOfferDetail.getAttribute("data-property-type"); contentOfferDetailtitles.querySelector('[data-property-name="offer-popup-title"]').innerHTML = contentOfferTitle; const offerBackgroundColor = mhg.productOffer.updateOfferTitleColours(contentOfferType, contentOfferDetailtitles).backgroundColor; mhg.productOffer.handleDynamicOfferCountdowns(btnOfferDetail, contentOfferDetailtitles); const contentOfferDetailTerms = scope.querySelector('[data-property-name="offer-popup-detail-terms"]'), contentOfferDetailTermsParent = scope.querySelector('[data-property-name="offer-popup-detail-terms-parent"]'), contentOfferGIftTitle = element.querySelector('[data-property-name="offer-gift-title"]').textContent, contentOfferDetailIntroduction = scope.querySelector('[data-property-name="offer-popup-detail-introduction"]'); function getCategorizedGifts(giftList) { let categorizedGifts = []; return giftList.forEach((offerGift => { let giftCriteria = { gifts: [] }; if (offerGift.criteriaList.reverse().forEach((criteria => { "ELIGIBLE_TENURE_RANGE" === criteria.attributeType && (giftCriteria.tenureMin = criteria.rangeValue?.minimum, giftCriteria.tenureMax = criteria.rangeValue?.maximum), "ELIGIBLE_LOAN_RANGE" === criteria.attributeType && (giftCriteria.loanMin = criteria.rangeValue?.minimum, giftCriteria.loanMax = criteria.rangeValue?.maximum), giftCriteria.subtitle = function (criteriaList) { let subtitleStr = ""; return criteriaList.forEach(((it, i) => { subtitleStr = subtitleStr + (i > 0 && criteriaList.length > 1 ? it.startingRangePreposition?.toLowerCase() : it.startingRangePreposition) + ` ${it.prefix}${it.rangeValue.minimum?.toLocaleString()} ${it.suffix} ${it.endingRangePreposition} ` + (it.rangeValue.maximum > 0 ? it.prefix : "") + (it.rangeValue.maximum > 0 ? it.rangeValue.maximum?.toLocaleString() : "") + ` ${it.rangeValue.maximum > 0 ? it.suffix : ""}` + (i < 1 && criteriaList.length > 1 ? " + " : "") })), subtitleStr.trim().replace(/\s+/g, " ") }(offerGift.criteriaList) })), categorizedGifts.length > 0) { let matched = !1; categorizedGifts.forEach((cGift => { giftCriteria.tenureMin === cGift.tenureMin && giftCriteria.tenureMax === cGift.tenureMax && giftCriteria.loanMin === cGift.loanMin && giftCriteria.loanMax === cGift.loanMax ? (cGift.gifts.push(offerGift.giftTitle), matched = !0) : cGift !== categorizedGifts[categorizedGifts.length - 1] || matched || (giftCriteria.gifts.push(offerGift.giftTitle), categorizedGifts.push(giftCriteria)) })) } else giftCriteria.gifts.push(offerGift.giftTitle), categorizedGifts.push(giftCriteria) })), categorizedGifts } for (let i = 0; i < dataOffer.length; i++)if (dataOffer[i].offerUid == contentOfferUid) { let currentGift = []; for (let j = 0; j < dataOffer[i].gifts.length; j++)if (dataOffer[i].gifts[j].giftTitle == contentOfferGIftTitle && !currentGift.includes(dataOffer[i].gifts[j].giftTitle)) { currentGift.push(dataOffer[i].gifts[j].giftTitle), null == dataOffer[i].introduction && null == dataOffer[i].introduction || (contentOfferDetailIntroduction.innerHTML = dataOffer[i].introduction), null != dataOffer[i].description || null != dataOffer[i].description ? (contentOfferDetailTermsParent.style.display = "block", contentOfferDetailTerms.innerHTML = dataOffer[i].description) : contentOfferDetailTermsParent.style.display = "none"; let giftOptionsContainer = document.createElement("div"); giftOptionsContainer.classList.add("tws-p-1", "rounded", "type-label-sm", offerBackgroundColor); let titleParagraph = document.createElement("p"); if (titleParagraph.classList.add("type-label-sm", "font-bold", "text-gray-11", "border-b", "border-solid", "border-gray-7", "tws-pb-1"), titleParagraph.textContent = contentOfferDetailGiftsTitle?.textContent, giftOptionsContainer.appendChild(titleParagraph), dataOffer[i].gifts.length > 1 && !0 === dataOffer[i].combineGift) { const categorizedGifts = getCategorizedGifts(dataOffer[i].gifts); categorizedGifts.forEach((categorizedGift => { let criteriaContainer = document.createElement("div"); if (criteriaContainer.classList.add("rich-text", "tws-pt-1.5"), categorizedGift.subtitle) { let criteriaSubtitle = document.createElement("p"); criteriaSubtitle.classList.add("type-label-sm", "text-gray-11"), criteriaSubtitle.textContent = categorizedGift.subtitle, criteriaContainer.appendChild(criteriaSubtitle) } let giftList = document.createElement("ul"); categorizedGift.gifts.forEach(((giftTitle, index) => { let listItem = document.createElement("li"), label = document.createElement("label"); label.classList.add("type-label-sm", "font-bold", "text-gray-11", "align-top"), label.textContent = giftTitle + (index < categorizedGift.gifts.length - 1 ? contentOfferDetailGiftsSeparator?.textContent : ""), listItem.appendChild(label), giftList.appendChild(listItem) })), criteriaContainer.appendChild(giftList), giftOptionsContainer.appendChild(criteriaContainer) })), contentOfferDetailGifts.appendChild(giftOptionsContainer) } else { let label = document.createElement("label"); label.classList.add("type-label-sm", "text-gray-11", "my-1"); let span = document.createElement("span"); span.classList.add("font-bold"), span.textContent = dataOffer[i].gifts[j].giftTitle, label.appendChild(span), giftOptionsContainer.appendChild(label), contentOfferDetailGifts.appendChild(giftOptionsContainer) } } } }, handlePopupProductCard: function (scope, element) { const selectorApplyNowProductCard = element.closest('[data-property-name="productCard"]'), contentOfferTitle = element.querySelector('[data-property-name="btn-offer-detail"]').getAttribute("data-property-offer-title"); if (selectorApplyNowProductCard) { let dealStatus = !1; selectorApplyNowProductCard.querySelector('button[data-property-action="cta"]') && (dealStatus = !0), trackAny({ event: "product_interaction", component_type: "card-carousel", component_title: "Learn More_" + contentOfferTitle, action: "click", item_list_name: pageVerticalList, items: [{ item_id: selectorApplyNowProductCard.getAttribute("data-property-product-id"), item_name: selectorApplyNowProductCard.getAttribute("data-property-product-name"), item_brand: selectorApplyNowProductCard.getAttribute("data-property-provider-name"), index: selectorApplyNowProductCard.getAttribute("data-property-card-index"), deal_status: dealStatus, promotion: promotionProductCardTracking(selectorApplyNowProductCard) }] }); const selectorProductButtonOffer = selectorApplyNowProductCard.querySelector('[data-property-name="product-button"]').querySelector('button[data-property-action="cta"]'), btnApplyNowOfferPopup = scope.querySelector('[data-property-name="modal-overlay-offer-detail"]').querySelector('button[data-property-action="cta"]'); if (selectorProductButtonOffer) { const btnTextApplyNow = selectorProductButtonOffer.innerText, btnUrlApplyNow = selectorProductButtonOffer.getAttribute("data-property-target"); btnApplyNowOfferPopup.classList.remove("hidden"), btnApplyNowOfferPopup.innerHTML = btnTextApplyNow, btnApplyNowOfferPopup.setAttribute("data-property-target", btnUrlApplyNow), btnApplyNowOfferPopup.setAttribute("data-property-card-index", selectorApplyNowProductCard.getAttribute("data-property-card-index")), btnApplyNowOfferPopup.setAttribute("data-property-product-id", selectorApplyNowProductCard.getAttribute("data-property-product-id")), btnApplyNowOfferPopup.setAttribute("data-property-product-name", selectorApplyNowProductCard.getAttribute("data-property-product-name")), btnApplyNowOfferPopup.setAttribute("data-property-provider", selectorApplyNowProductCard.getAttribute("data-property-provider")), btnApplyNowOfferPopup.setAttribute("data-property-provider-name", selectorApplyNowProductCard.getAttribute("data-property-provider-name")), btnApplyNowOfferPopup.setAttribute("data-property-button-status", selectorProductButtonOffer.getAttribute("data-property-button-status")), btnApplyNowOfferPopup.setAttribute("data-property-variant-testing-url", selectorProductButtonOffer.getAttribute("data-property-variant-testing-url")), btnApplyNowOfferPopup.setAttribute("data-property-variant-testing-weightage", selectorProductButtonOffer.getAttribute("data-property-variant-testing-weightage")), btnApplyNowOfferPopup.setAttribute("data-property-promotion", promotionProductCardTracking(selectorApplyNowProductCard)), btnApplyNowOfferPopup.setAttribute("data-property-toggle-popup", selectorProductButtonOffer.getAttribute("data-property-toggle-popup")), btnApplyNowOfferPopup.setAttribute("data-property-toggle-position", "offer-desktop"); const getTargetOpenApplyNow = selectorApplyNowProductCard.querySelector('[data-property-name="product-button"] [data-property-action="cta"]'); btnApplyNowOfferPopup.setAttribute("data-property-target-open", getTargetOpenApplyNow.getAttribute("data-property-target-open")) } else btnApplyNowOfferPopup.classList.add("hidden") } }, handlePopupProductInformation: function (scope, element) { const selectorApplyNowProductInformation = element.closest('[data-property-name="product-information-page"]'), contentOfferTitle = element.querySelector('[data-property-name="btn-offer-detail"]').getAttribute("data-property-offer-title"); if (selectorApplyNowProductInformation) { const btnApplyNowStatus = "true" === selectorApplyNowProductInformation.querySelector('[data-property-name="btn-apply-now-product-card"]').getAttribute("data-property-button-status"), btnApplyNowOfferPopup = scope.querySelector('[data-property-name="modal-overlay-offer-detail"]').querySelector('button[data-property-action="cta"]'); let dealStatus = !1; selectorApplyNowProductInformation.querySelector('button[data-property-action="cta"]') && (dealStatus = !0), trackAny({ event: "product_interaction", location: pageLocation, component_type: "card-carousel", component_title: "Offer Learn More_" + contentOfferTitle, action: "click", item_list_name: "product-page", items: [{ item_id: selectorApplyNowProductInformation.getAttribute("data-property-product-id"), item_name: selectorApplyNowProductInformation.getAttribute("data-property-product-name"), item_brand: selectorApplyNowProductInformation.getAttribute("data-property-provider-name"), deal_status: dealStatus, promotion: promotionInformationPageTracking(selectorApplyNowProductInformation) }] }); const selectorProductButtonOffer = selectorApplyNowProductInformation?.querySelector('[data-property-action="cta"]'); if (btnApplyNowStatus && selectorProductButtonOffer) { const btnTextApplyNow = selectorProductButtonOffer.innerText, btnUrlApplyNow = selectorProductButtonOffer.getAttribute("data-property-target"); btnApplyNowOfferPopup.classList.remove("hidden"), btnApplyNowOfferPopup.innerHTML = btnTextApplyNow, btnApplyNowOfferPopup.setAttribute("data-property-target", btnUrlApplyNow), btnApplyNowOfferPopup.setAttribute("data-property-product-id", selectorApplyNowProductInformation.getAttribute("data-property-product-id")), btnApplyNowOfferPopup.setAttribute("data-property-product-name", selectorApplyNowProductInformation.getAttribute("data-property-product-name")), btnApplyNowOfferPopup.setAttribute("data-property-provider", selectorApplyNowProductInformation.getAttribute("data-property-provider")), btnApplyNowOfferPopup.setAttribute("data-property-provider-name", selectorApplyNowProductInformation.getAttribute("data-property-provider-name")), btnApplyNowOfferPopup.setAttribute("data-property-url-alias", selectorApplyNowProductInformation.getAttribute("data-property-url-alias")), btnApplyNowOfferPopup.setAttribute("data-property-promotion", promotionInformationPageTracking(selectorApplyNowProductInformation)), btnApplyNowOfferPopup.setAttribute("data-property-variant-testing-url", selectorApplyNowProductInformation.getAttribute("data-property-variant-testing-url")), btnApplyNowOfferPopup.setAttribute("data-property-variant-testing-weightage", selectorApplyNowProductInformation.getAttribute("data-property-variant-testing-weightage")), btnApplyNowOfferPopup.setAttribute("data-property-toggle-popup", selectorProductButtonOffer.getAttribute("data-property-toggle-popup")), btnApplyNowOfferPopup.setAttribute("data-property-toggle-position", "offer-desktop") } else btnApplyNowOfferPopup.classList.add("hidden") } }, handlePopupOfferDetailMobile: function (scope, element, dataOffer) { const lmModalCardDetail = document.querySelector('[data-property-name="modal-card-detail"]'), lmContentCardDetail = document.querySelector('[data-property-name="content-card-detail"]'), lmListQuickFact = document.querySelector('[data-property-name="list-quick-fact"]'), lmContentOfferMobile = document.querySelector('[data-property-name="content-offer-mobile"]'), lmSeeFullDetails = document.querySelectorAll('[data-property-name="see-full-details"]'), lmProductCard = element.closest('[data-property-name="productCard"]'), btnOfferDetail = element.querySelector('[data-property-name="btn-offer-detail"]'), contentOfferTitle = btnOfferDetail.getAttribute("data-property-offer-title"), contentOfferUid = btnOfferDetail.getAttribute("data-property-offer-uid"); if (lmModalCardDetail.classList.add("fixed"), lmContentCardDetail.classList.add("slide"), lmProductCard) { lmContentCardDetail.setAttribute("data-property-from", "learn-more"), lmContentCardDetail.setAttribute("data-property-offer", contentOfferTitle), lmContentCardDetail.setAttribute("data-property-offer-uid", contentOfferUid), lmContentCardDetail.setAttribute("data-property-card-index", lmProductCard.getAttribute("data-property-card-index")), lmContentCardDetail.setAttribute("data-property-product-id", lmProductCard.getAttribute("data-property-product-id")), lmContentCardDetail.setAttribute("data-property-product-name", lmProductCard.getAttribute("data-property-product-name")), lmContentCardDetail.setAttribute("data-property-provider", lmProductCard.getAttribute("data-property-provider")), lmContentCardDetail.setAttribute("data-property-provider-name", lmProductCard.getAttribute("data-property-provider-name")), lmContentCardDetail.setAttribute("data-property-deal-status", !1); let dealStatus = !1; lmProductCard.querySelector('button[data-property-action="cta"]') && (dealStatus = !0, lmContentCardDetail.setAttribute("data-property-deal-status", !0), lmContentCardDetail.setAttribute("data-property-promotion", promotionProductCardTracking(lmProductCard))), trackAny({ event: "product_interaction", component_type: "card-carousel", component_title: "Learn More_" + contentOfferTitle, action: "expand", item_list_name: pageVerticalList, items: [{ item_id: lmProductCard.getAttribute("data-property-product-id"), item_name: lmProductCard.getAttribute("data-property-product-name"), item_brand: lmProductCard.getAttribute("data-property-provider-name"), index: lmProductCard.getAttribute("data-property-card-index"), deal_status: dealStatus, promotion: promotionProductCardTracking(lmProductCard) }] }); const lmProductImage = lmProductCard.getAttribute("data-property-product-image"), lmProductName = lmProductCard.getAttribute("data-property-product-name"), lmQuickFact = JSON.parse(lmProductCard.getAttribute("data-property-attribute-quick-fact")), lmUrlAlias = lmProductCard.getAttribute("data-property-product-url-alias"); lmSeeFullDetails.forEach((lmSeeFullDetail => { lmSeeFullDetail.classList.remove("hidden"), lmSeeFullDetail.removeAttribute("data-property-url"), lmUrlAlias ? lmSeeFullDetail.setAttribute("data-property-url", lmUrlAlias) : lmSeeFullDetail.classList.add("hidden"), lmSeeFullDetail.addEventListener("click", (() => { const btnSeeFullUrl = lmSeeFullDetail.getAttribute("data-property-url"); btnSeeFullUrl && "" !== btnSeeFullUrl.trim() && (window.location.href = btnSeeFullUrl) })) })); const lmCardDetailHeader = document.querySelector('[data-property-name="card-detail-header"]'), 
//  lmImgHeader = lmCardDetailHeader.querySelector("img"); 
 if (lmCardDetailHeader.querySelector("label").textContent = lmProductName, lmListQuickFact.innerHTML = "", lmQuickFact) { const quickFactPros = lmQuickFact.keyvalues?.filter((x => "pros" === x.key)), quickFactConst = lmQuickFact.keyvalues?.filter((x => "cons" === x.key)); let lmArr = []; quickFactPros.length > 0 && (lmArr = lmArr.concat(quickFactPros[0].values)), quickFactConst.length > 0 && (lmArr = lmArr.concat(quickFactConst[0].values)), lmArr.forEach((item => { if ("" !== item) { const li = document.createElement("li"); li.className = "my-0.5", li.innerHTML = item, lmListQuickFact.appendChild(li) } })) } const clonedLmOffersMobile = lmProductCard.querySelector('[data-property-name="product-content-offer"]').cloneNode(!0); lmContentOfferMobile.innerHTML = "", lmContentOfferMobile.appendChild(clonedLmOffersMobile); const lmMoreInfoMobile = lmProductCard.querySelector('[data-property-name="product-content-more-info"]'); scope.querySelector('[data-property-name="content-more-info-mobile"]').innerHTML = lmMoreInfoMobile.cloneNode(!0).innerHTML; const lmProductButtonOffer = lmProductCard.querySelector('button[data-property-action="cta"]'), lmBtnApplyNowPopup = lmModalCardDetail.querySelector('button[data-property-action="cta"]'); if (lmProductButtonOffer) { const btnTextApplyNow = lmProductButtonOffer.innerText, btnUrlApplyNow = lmProductButtonOffer.getAttribute("data-property-target"); if ("true" === lmProductButtonOffer.getAttribute("data-property-button-status")) lmBtnApplyNowPopup.classList.add("hidden"); else { lmBtnApplyNowPopup.classList.remove("hidden"), lmBtnApplyNowPopup.innerHTML = btnTextApplyNow, lmBtnApplyNowPopup.setAttribute("data-property-target", btnUrlApplyNow), lmBtnApplyNowPopup.setAttribute("data-property-variant-testing-url", lmProductButtonOffer.getAttribute("data-property-variant-testing-url")), lmBtnApplyNowPopup.setAttribute("data-property-variant-testing-weightage", lmProductButtonOffer.getAttribute("data-property-variant-testing-weightage")), lmBtnApplyNowPopup.setAttribute("data-property-card-index", lmProductCard.getAttribute("data-property-card-index")), lmBtnApplyNowPopup.setAttribute("data-property-product-id", lmProductCard.getAttribute("data-property-product-id")), lmBtnApplyNowPopup.setAttribute("data-property-product-name", lmProductCard.getAttribute("data-property-product-name")), lmBtnApplyNowPopup.setAttribute("data-property-provider", lmProductCard.getAttribute("data-property-provider")), lmBtnApplyNowPopup.setAttribute("data-property-provider-name", lmProductCard.getAttribute("data-property-provider-name")), lmBtnApplyNowPopup.setAttribute("data-property-promotion", promotionProductCardTracking(lmProductCard)), lmBtnApplyNowPopup.setAttribute("data-property-toggle-popup", lmProductButtonOffer.getAttribute("data-property-toggle-popup")), lmBtnApplyNowPopup.setAttribute("data-property-toggle-position", "offer-mobile"); const getTargetOpenApplyNow = lmProductCard.querySelector('[data-property-name="product-button"] [data-property-action="cta"]'); lmBtnApplyNowPopup.setAttribute("data-property-target-open", getTargetOpenApplyNow.getAttribute("data-property-target-open")) } } else lmBtnApplyNowPopup.classList.add("hidden"); mhg.productOffer.initLmOfferElementBehavior(scope, clonedLmOffersMobile); const offerDetailTabScroll = document.querySelector('[data-property-name="modal-card-detail"] [data-property-content="offer-details-tab"] [data-property-name="content-scroll"]'), setOfferTo = offerDetailTabScroll.querySelector(`[data-property-name="product-content-offer-detail"][data-offer-uid="${contentOfferUid}"]`); setOfferTo && offerDetailTabScroll.scrollTo({ top: setOfferTo.offsetTop, left: 0, behavior: "smooth" }), document.querySelector('[data-property-tab="offer-details-tab"]').classList.remove("hidden"); const lmBtnCardDetail = lmProductCard.querySelector('[data-property-name="btn-card-detail"]'), lmShowQuickFact = "true" === lmBtnCardDetail.getAttribute("data-property-show-quick-fact"), lmProductCheckOffers = "true" === lmBtnCardDetail.getAttribute("data-property-has-offer"), lmShowMoreInfo = "true" === lmBtnCardDetail.getAttribute("data-property-show-more-info"), lmButtonTabs = lmModalCardDetail.querySelectorAll('[data-property-name="btn-tab-card-detail"]'); lmModalCardDetail.querySelectorAll('[data-property-name="content-tab-card-detail"]').forEach((lmContentTab => { "offer-details-tab" == lmContentTab.getAttribute("data-property-content") ? (lmContentTab.classList.remove("hidden"), lmButtonTabs.forEach((lmButtonTab => { const lmTabLine = lmButtonTab.querySelector('[data-property-name="line-tab-card-detail"]'); lmButtonTab.classList.remove("hidden", "flex-none", "w-2/4"), "offer-details-tab" == lmButtonTab.getAttribute("data-property-tab") ? (lmButtonTab.classList.remove("text-gray-10"), lmButtonTab.classList.add("text-gray-12", "font-bold"), lmTabLine.classList.add("bg-blue-9")) : (lmButtonTab.classList.add("text-gray-10"), lmButtonTab.classList.remove("text-gray-12", "font-bold"), lmTabLine.classList.remove("bg-blue-9")) }))) : lmContentTab.classList.add("hidden") })), lmButtonTabs.forEach((lmButtonTab => { lmShowQuickFact || "quick-fact-tab" != lmButtonTab.getAttribute("data-property-tab") || lmButtonTab.classList.add("hidden"), lmProductCheckOffers || "offer-details-tab" != lmButtonTab.getAttribute("data-property-tab") || lmButtonTab.classList.add("hidden"), lmShowMoreInfo || "more-info-tab" != lmButtonTab.getAttribute("data-property-tab") || lmButtonTab.classList.add("hidden") })); 2 == lmModalCardDetail.querySelectorAll('.hidden[data-property-name="btn-tab-card-detail"]').length && lmButtonTabs.forEach((lmButtonTab => { "quick-fact-tab" == lmButtonTab.getAttribute("data-property-tab") && lmButtonTab.classList.add("flex-none", "w-2/4") })), document.querySelector('[data-property-name="container-listing"]') && document.querySelector('[data-property-name="container-listing"]').classList.remove("fixed"), document.querySelector('[data-property-name="sticky-filter-panel"]')?.classList.remove("fixed"); const scrollModalContents = lmModalCardDetail.querySelectorAll('[data-property-name="content-scroll"]'); scrollModalContents.forEach((scrollModalContent => { const seeMoreProviderButton = scrollModalContent.querySelector('[data-property-name="see-more-provider-button"]'), seeFullDetail = scrollModalContent.querySelector('[data-property-name="see-full-details"]'); seeMoreProviderButton.classList.add("hidden"), seeFullDetail.classList.add("hidden") })), lmProductCard.getAttribute("data-property-product-url-alias") && scrollModalContents.forEach((scrollModalContent => { scrollModalContent.querySelector('[data-property-name="see-full-details"]').classList.remove("hidden") })); "true" === lmProductCard.getAttribute("data-property-has-provider-button") && lmProductCard.hasAttribute("data-property-provider-url-alias") && scrollModalContents.forEach((scrollModalContent => { const seeMoreProviderButton = scrollModalContent.querySelector('[data-property-name="see-more-provider-button"]'), labelSeeMoreProviderButton = scrollModalContent.querySelector('[data-property-name="label-see-more-provider-button"]'); seeMoreProviderButton.classList.remove("hidden"), seeMoreProviderButton.setAttribute("data-property-url", lmProductCard.getAttribute("data-property-provider-url-alias")), labelSeeMoreProviderButton.innerHTML = labelSeeMoreProviderButton.getAttribute("data-property-label").replace("{providerName}", lmProductCard.getAttribute("data-property-provider-name")) })) } const selectorApplyNowProductInformation = element.closest('[data-property-name="product-information-page"]'); if (selectorApplyNowProductInformation) { const contentOfferDetailTerms = scope.querySelector('[data-property-name="offer-popup-detail-terms-mb"]'), contentOfferDetailTermsParent = scope.querySelector('[data-property-name="offer-popup-detail-terms-parent-mb"]'), contentOfferDetailGifts = scope.querySelector('[data-property-name="offer-popup-detail-gifts-mb"]'), contentOfferDetailtitlesMb = scope.querySelector('[data-property-name="offer-popup-detail-title-mb"]'); let dealStatus = !1; selectorApplyNowProductInformation.querySelector('button[data-property-action="cta"]') && (dealStatus = !0), trackAny({ event: "product_interaction", location: pageLocation, component_type: "card-carousel", component_title: "Offer Learn More_" + contentOfferTitle, action: "click", item_list_name: "product-page", items: [{ item_id: selectorApplyNowProductInformation.getAttribute("data-property-product-id"), item_name: selectorApplyNowProductInformation.getAttribute("data-property-product-name"), item_brand: selectorApplyNowProductInformation.getAttribute("data-property-provider-name"), deal_status: dealStatus, promotion: promotionInformationPageTracking(selectorApplyNowProductInformation) }] }); const contentOfferType = btnOfferDetail.getAttribute("data-property-type"); contentOfferDetailGifts.innerHTML = "", mhg.productOffer.updateOfferTitleColours(contentOfferType, contentOfferDetailtitlesMb), contentOfferDetailtitlesMb.querySelector('[data-property-name="offer-popup-title"]').innerHTML = contentOfferTitle, mhg.productOffer.handleDynamicOfferCountdowns(btnOfferDetail, contentOfferDetailtitlesMb); const contentOfferGIftTitle = element.querySelector('[data-property-name="offer-gift-title"]').textContent; for (let i = 0; i < dataOffer.length; i++)if (dataOffer[i].offerTitle == contentOfferTitle) for (let j = 0; j < dataOffer[i].gifts.length; j++)if (dataOffer[i].gifts[j].giftTitle == contentOfferGIftTitle) { null != dataOffer[i].description || null != dataOffer[i].description ? (contentOfferDetailTermsParent.style.display = "block", contentOfferDetailTerms.innerHTML = dataOffer[i].description) : contentOfferDetailTermsParent.style.display = "none"; if (dataOffer[i].gifts.length > 1 && !0 === dataOffer[i].combineGift) { let setGiftTitleCount = 1; dataOffer[i].gifts.forEach((item => { const incrGiftTitleCount = setGiftTitleCount++, borderStyle = dataOffer[i].gifts.length !== incrGiftTitleCount ? "border-b" : ""; contentOfferDetailGifts.innerHTML += '<div class="' + borderStyle + ' border-solid border-gray-7"><div class="text-gray-11 tws-my-1 flex"><div class="type-label-sm mr-2" style="width:70px;">Option ' + incrGiftTitleCount + '</div><div class="type-label-md font-bold flex-1">' + item.giftTitle + "</div></div></div>" })) } else contentOfferDetailGifts.innerHTML = '<div><label class="type-label-sm text-gray-11 my-1"><span class="font-bold">' + dataOffer[i].gifts[j].giftTitle + "</span></label><div>" } } }, initLmOfferElementBehavior: function (scope, offerElement) { offerElement.querySelectorAll('[data-property-name="btn-offer-tnc-card-detail"]').forEach(((btnOffer, index) => { btnOffer.parentElement.querySelector('[data-property-name="content-offer-tnc-card-detail"]').classList.remove("hidden"), btnOffer.parentElement.querySelector('[data-property-name="icon-offer-tnc-card-detail"]').innerHTML = "remove", btnOffer.closest('[data-property-name="content-card-detail"]').classList.add("second-slide"), btnOffer.addEventListener("click", (e => { const tnc = btnOffer.parentElement.querySelector('[data-property-name="content-offer-tnc-card-detail"]'), iconTnc = btnOffer.parentElement.querySelector('[data-property-name="icon-offer-tnc-card-detail"]'); tnc.classList.contains("hidden") ? (tnc.classList.remove("hidden"), iconTnc.innerHTML = "remove") : (tnc.classList.add("hidden"), iconTnc.innerHTML = "add"); const contentOfferTncDetails = btnOffer.closest('[data-property-name="product-content-offer"]').querySelectorAll('[data-property-name="content-offer-tnc-card-detail"]'); Array.from(contentOfferTncDetails).every((element => element.classList.contains("hidden"))) ? btnOffer.closest('[data-property-name="content-card-detail"]').classList.remove("second-slide") : btnOffer.closest('[data-property-name="content-card-detail"]').classList.add("second-slide") })); const countdownElement = btnOffer.closest('[data-property-name="product-content-offer-detail"]').querySelector('div[data-property-name="countdown-timer"]'); mhg.productOffer.handleDynamicOfferCountdowns(countdownElement) })) }, closeIntervalMobileProductInformation: function (scope) { const btnCloseInterval = scope.querySelector('[data-property-name="btn-close-card-detail"]'); function closeCardDetailInterval() { clearInterval(mhg.productOffer.desktopPopupCountdownTimer) } btnCloseInterval && (btnCloseInterval.addEventListener("click", closeCardDetailInterval), btnCloseInterval.addEventListener("touchmove", closeCardDetailInterval)), scope.querySelector('[data-property-name="modal-card-detail"]').addEventListener("click", (function (e) { e.target == scope.querySelector('[data-property-name="modal-card-detail"]') && closeCardDetailInterval() })) }, closeOfferDetailListener: function (scope) { const btnCloseOfferDetail = scope.querySelector('[data-property-name="btn-close-offer-detail"]'); btnCloseOfferDetail && (btnCloseOfferDetail.addEventListener("click", (function () { mhg.productOffer.closeOfferDetail(scope) })), btnCloseOfferDetail.addEventListener("touchmove", (function () { mhg.productOffer.closeOfferDetail(scope) }))); const modalOverlayOfferDetail = scope.querySelector('[data-property-name="modal-overlay-offer-detail"]'); modalOverlayOfferDetail.addEventListener("click", (function (e) { e.target == modalOverlayOfferDetail && mhg.productOffer.closeOfferDetail(scope) })) }, closeOfferDetail: function (scope) { document.documentElement.style.overflowY = "auto"; const modalOverlayOfferDetail = scope.querySelector('[data-property-name="modal-overlay-offer-detail"]'), modalContentOfferDetail = scope.querySelector('[data-property-name="modal-content-offer-detail"]'); setTimeout((() => { modalOverlayOfferDetail.classList.remove("fixed") }), 200), modalContentOfferDetail.classList.add("hidden"), clearInterval(mhg.productOffer.desktopPopupCountdownTimer) }, handleOfferDescription: function (scope) { const productInformation = scope.querySelector('[data-property-name="product-information-page"]'); if (productInformation) { const offersGiftTitle = productInformation.querySelectorAll('[data-property-name="offer-gift-title"]'); for (let i = 0; i < offersGiftTitle.length; i++) { const offerGiftTitle = offersGiftTitle[i], heightOfferGiftTitle = offerGiftTitle.clientHeight, contentOfferDetail = offerGiftTitle.closest('[data-property-name="content-offer-detail"]'), offerDescContent = contentOfferDetail.querySelector('[data-property-name="offer-desc-content"]'), offerDescContentWrap = contentOfferDetail.querySelector('[data-property-name="offer-desc-content-wrap"]'), offerAdditionalGift = contentOfferDetail.querySelector('[data-property-name="offer-additional-gift"]'), offerAdditionalGiftStatus = "true" === offerAdditionalGift?.getAttribute("data-property-additional-gift-status"), lineClampDescription = { firstLineClamp: 4, secondLineClamp: 5, thirdLineClamp: 6 }; if (window.innerWidth >= 900) { const setMinHeightOfferGiftTitle = 24; heightOfferGiftTitle <= setMinHeightOfferGiftTitle && (offerDescContent.style.cssText = "-webkit-line-clamp:" + lineClampDescription.thirdLineClamp, offerDescContentWrap.classList.add("tws-mb-2"), offerDescContent.style.minHeight = "96px", offerDescContent.style.maxHeight = "96px"), heightOfferGiftTitle <= setMinHeightOfferGiftTitle && offerAdditionalGiftStatus && (offerDescContent.style.cssText = "-webkit-line-clamp:" + lineClampDescription.secondLineClamp, offerDescContentWrap.classList.add("tws-mb-1"), offerDescContent.style.minHeight = "80px", offerDescContent.style.maxHeight = "80px"), heightOfferGiftTitle > setMinHeightOfferGiftTitle && (offerDescContent.style.cssText = "-webkit-line-clamp:" + lineClampDescription.secondLineClamp, offerDescContentWrap.classList.add("tws-mb-1"), offerDescContent.style.minHeight = "80px", offerDescContent.style.maxHeight = "80px"), heightOfferGiftTitle > setMinHeightOfferGiftTitle && offerAdditionalGiftStatus && (offerDescContent.style.cssText = "-webkit-line-clamp:" + lineClampDescription.firstLineClamp, offerDescContentWrap.classList.add("tws-mb-1"), offerDescContent.style.minHeight = "64px", offerDescContent.style.maxHeight = "64px") } else { const setMinHeightOfferGiftTitle = 18; offerGiftTitle.style.height = "36px", heightOfferGiftTitle <= setMinHeightOfferGiftTitle && (offerDescContent.style.cssText = "-webkit-line-clamp:" + lineClampDescription.secondLineClamp, offerDescContentWrap.classList.add("tws-mb-1"), offerDescContent.style.minHeight = "80px", offerDescContent.style.maxHeight = "80px"), heightOfferGiftTitle <= setMinHeightOfferGiftTitle && offerAdditionalGiftStatus && (offerDescContent.style.cssText = "-webkit-line-clamp:" + lineClampDescription.secondLineClamp, offerDescContentWrap.classList.add("tws-mb-1"), offerDescContent.style.minHeight = "80px", offerDescContent.style.maxHeight = "80px", offerGiftTitle.style.height = "auto"), heightOfferGiftTitle > setMinHeightOfferGiftTitle && (offerDescContent.style.cssText = "-webkit-line-clamp:" + lineClampDescription.secondLineClamp, offerDescContentWrap.classList.add("tws-mb-1"), offerDescContent.style.minHeight = "80px", offerDescContent.style.maxHeight = "80px"), heightOfferGiftTitle > setMinHeightOfferGiftTitle && offerAdditionalGiftStatus && (offerDescContent.style.cssText = "-webkit-line-clamp:" + lineClampDescription.firstLineClamp, offerDescContentWrap.classList.add("tws-mb-1"), offerDescContent.style.minHeight = "64px", offerDescContent.style.maxHeight = "64px") } } } }, isOfferBadgeTextOverflowing: function (element) { const offerCardSelector = element.closest('[data-property-name="content-offer-detail"]'); if (offerCardSelector) { if (element.closest('[data-property-name="productCard"]')) { const offerCardWidth = offerCardSelector.offsetWidth; let offerImageSelector = offerCardSelector.querySelector('[data-property-name="offer-image-mobile"]'); window.innerWidth >= 900 && (offerImageSelector = offerCardSelector.querySelector('[data-property-name="offer-image-desktop"]')); const offerContentWidth = offerCardWidth - offerImageSelector.offsetWidth; if (element.offsetWidth > offerContentWidth) return !0 } } if (null != element.closest('[data-property-name="product-information-page"]')) { const offerCardWrapperClientWidth = offerCardSelector.querySelector('[data-property-name="offer-content-wrapper"]').clientWidth; if (element.offsetWidth > offerCardWrapperClientWidth) return !0 } return !1 }, offerSwiper: function (widgetId, macroId) { return new Swiper(`#hs_cos_wrapper_${widgetId} .${macroId}[data-property-name="offer-swiper"]`, { direction: "horizontal", slidesPerView: "auto", spaceBetween: 8, speed: 700, pagination: { el: `#hs_cos_wrapper_${widgetId} .${macroId} .swiper-pagination`, clickable: !0 }, navigation: { nextEl: `#hs_cos_wrapper_${widgetId} .${macroId} .swiper-button-next`, prevEl: `#hs_cos_wrapper_${widgetId} .${macroId} .swiper-button-prev` } }) } };
//# sourceURL=https://cdn1.hubspotusercontent-eu1.net/hub/25174313/hub_generated/template_assets/79942938096/1726472315675/modules/common/product-card/product-offer.js